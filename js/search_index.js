var search_data = {"index":{"longSearchIndex":["array","enumerable","file","hash","io","integer","net","net::httpclienterror","net::httpinformation","net::httpmultiplechoice","net::httpredirection","net::httpresponse","net::httpservererror","net::httpsuccess","nuggets","nuggets::array","nuggets::array::blankmixin","nuggets::array::correlationmixin","nuggets::array::histogrammixin","nuggets::array::limitmixin","nuggets::array::meanmixin","nuggets::array::medianmixin","nuggets::array::modemixin","nuggets::array::regressionmixin","nuggets::array::runiqmixin","nuggets::array::standarddeviationmixin","nuggets::array::variancemixin","nuggets::env","nuggets::env::setmixin","nuggets::env::userencodingmixin","nuggets::env::userhomemixin","nuggets::file","nuggets::file::extmixin","nuggets::file::replacemixin","nuggets::file::submixin","nuggets::file::whichmixin","nuggets::hash","nuggets::hash::blankmixin","nuggets::hash::deepmergemixin","nuggets::hash::nestmixin","nuggets::hash::unrollmixin","nuggets::io","nuggets::io::interactmixin","nuggets::io::nullmixin","nuggets::io::redirectmixin","nuggets::integer","nuggets::integer::lengthmixin","nuggets::integer::mapmixin","nuggets::object","nuggets::object::blankmixin","nuggets::object::booleanmixin","nuggets::object::msendmixin","nuggets::object::silencemixin","nuggets::object::singletonclassmixin","nuggets::proc","nuggets::proc::bindmixin","nuggets::range","nuggets::range::quantilemixin","nuggets::string","nuggets::string::camelscoremixin","nuggets::string::evaluatemixin","nuggets::string::wcmixin","nuggets::string::xormixin","nuggets::uri","nuggets::uri::contenttypemixin","nuggets::uri::existmixin","nuggets::uri::redirectmixin","nuggets::version","numeric","object","object::contenttype","proc","process","range","string","string::case","tempfile","uri","util","util::ansicolor2css","util::cli","util::contenttype","util::i18n","util::pluggable","util::ruby","array#%()","object#nuggets()","nuggets::string::xormixin#^()","enumerable#_block_for_all_any_extended()","enumerable#_nuggets_original_all?()","enumerable#_nuggets_original_any?()","enumerable#_nuggets_original_max()","enumerable#_nuggets_original_max_by()","enumerable#_nuggets_original_min()","enumerable#_nuggets_original_min_by()","enumerable#_nuggets_original_minmax()","enumerable#_nuggets_original_minmax_by()","tempfile::_nuggets_original_open()","io::_nuggets_original_read()","util::cli#abort()","enumerable#agrep()","io::agrep()","enumerable#all?()","nuggets::array::histogrammixin#annotated_histogram()","string#ansicolor2css()","string#ansicolour2css()","enumerable#any?()","io::append()","io::append_read()","nuggets::array::meanmixin#arithmetic_mean()","array#ascending?()","util::cli#ask()","hash#at()","numeric#at_least()","numeric#at_most()","nuggets::array::meanmixin#average()","nuggets::array::meanmixin#avg()","nuggets::array::limitmixin#between()","numeric#between()","nuggets::proc::bindmixin#bind()","nuggets::object::blankmixin#blank?()","nuggets::object::booleanmixin#boolean?()","nuggets::string::wcmixin#byte_count()","nuggets::string::camelscoremixin#camelcase()","nuggets::string::camelscoremixin#camelcase!()","nuggets::string::camelscoremixin#camelize()","nuggets::string::camelscoremixin#camelize!()","nuggets::array::limitmixin#cap()","string#capitalize_first()","string#capitalize_first!()","string#capitalized?()","string#case()","numeric#ceil_to()","nuggets::string::wcmixin#char_count()","nuggets::file::extmixin#chomp_ext()","nuggets::file::extmixin#chomp_ext!()","util::ansicolor2css#clear()","array#comb()","util::ruby#command_for_ruby_tool()","nuggets::string::camelscoremixin#constantize()","nuggets::uri::contenttypemixin#content_type()","util::ansicolor2css#convert()","nuggets::array::correlationmixin#corr()","nuggets::array::correlationmixin#correlation_coefficient()","nuggets::string::wcmixin#count_by_re()","nuggets::string::wcmixin#count_by_re2()","nuggets::array::variancemixin#cov()","nuggets::array::variancemixin#covariance()","array#decreasing?()","nuggets::hash::deepmergemixin#deep_merge()","nuggets::hash::deepmergemixin#deep_merge!()","nuggets::hash::deepmergemixin#deep_update()","util::cli::defaults()","array#descending?()","nuggets::integer::lengthmixin#digit_count()","string#downcase?()","nuggets::object::singletonclassmixin#eigenclass()","nuggets::object::singletonclassmixin#eigenclass?()","nuggets::object::singletonclassmixin#eigenobject()","nuggets::string::evaluatemixin#evaluate()","util::cli::execute()","util::cli#execute()","nuggets::uri::existmixin#exist?()","nuggets::uri::existmixin#exists?()","util::cli#exit()","nuggets::file::submixin::extended()","nuggets::uri::contenttypemixin::extended()","nuggets::uri::existmixin::extended()","integer#f!()","integer#fac()","integer#factorial()","integer#factorial_memoized()","nuggets::object::booleanmixin#false?()","hash#first()","array#flatten_once()","array#flatten_once!()","numeric#floor_to()","nuggets::uri::redirectmixin#follow_redirect()","util::ansicolor2css#format()","nuggets::array::histogrammixin#formatted_histogram()","string#from_dotted_decimal()","nuggets::array::meanmixin#generalized_mean()","util::cli#generic_opts()","nuggets::array::meanmixin#geomean()","nuggets::array::meanmixin#geometric_mean()","nuggets::uri::redirectmixin#get_redirect()","nuggets::object::singletonclassmixin#ghost_class()","nuggets::object::singletonclassmixin#ghost_class?()","nuggets::object::singletonclassmixin#ghost_object()","string::gimme_match_data!()","nuggets::file::submixin#gsub()","nuggets::file::submixin#gsub!()","string#gsub_with_md()","string#gsub_with_md!()","nuggets::array::meanmixin#harmean()","nuggets::array::meanmixin#harmonic_mean()","nuggets::uri::redirectmixin#head_redirect()","nuggets::array::histogrammixin#histogram()","numeric#hms()","array#in_order()","hash#in_order()","array#in_order!()","nuggets::array::correlationmixin::included()","nuggets::array::modemixin::included()","nuggets::array::regressionmixin::included()","nuggets::array::standarddeviationmixin::included()","array#increasing?()","util::cli#init()","hash#insert()","hash#insert!()","nuggets::io::interactmixin#interact()","process::interact_ruby()","hash#last()","nuggets::integer::lengthmixin#length()","nuggets::array::limitmixin#limit()","numeric#limit()","nuggets::string::wcmixin#line_count()","nuggets::array::regressionmixin#linear_least_squares()","nuggets::array::regressionmixin#llsq()","util::cli#load_config()","util::pluggable#load_env_plugins()","util::pluggable#load_gem_plugins()","util::pluggable#load_path_plugins()","util::pluggable#load_plugin_file()","util::pluggable#load_plugin_files()","util::pluggable#load_plugins()","util::pluggable::load_plugins_for()","util::pluggable#loaded_plugins()","util::ruby#locate_ruby_tool()","util::ruby#locate_ruby_tool_by_basename()","string#lower_case?()","nuggets::integer::mapmixin#map_positive()","enumerable#max()","numeric#max()","enumerable#max_by()","nuggets::array::meanmixin#mean()","nuggets::array::medianmixin#median()","util::cli#merge_config()","nuggets::object::singletonclassmixin#metaclass()","nuggets::object::singletonclassmixin#metaclass?()","nuggets::object::singletonclassmixin#metaobject()","enumerable#min()","numeric#min()","enumerable#min_by()","nuggets::array::meanmixin#minkowski_mean()","enumerable#minmax()","enumerable#minmax_by()","string#mixed_case?()","nuggets::array::modemixin#mode()","nuggets::array::modemixin#modes()","array#monotone?()","array#monotonic?()","nuggets::object::msendmixin#msend()","string#msub()","string#msub!()","nuggets::object::booleanmixin#negate()","numeric#negative?()","nuggets::hash::nestmixin#nest()","util::cli::new()","numeric#non_negative?()","string#nsub()","string#nsub!()","util::contenttype#of()","util::contenttype#of()","array#only()","hash#only()","hash#only_pair()","tempfile::open()","util::cli#open_file_or_std()","io::open_with_mode()","util::cli#option_parser()","util::cli#opts()","util::cli::parent_const_get()","util::cli#parse_options()","util::pluggable#plugin_filename()","nuggets::array::correlationmixin#pmcc()","nuggets::array::histogrammixin#pmf()","numeric#positive?()","util::cli#post_opts()","nuggets::array::meanmixin#power_mean()","util::cli#pre_opts()","nuggets::array::histogrammixin#probability_mass_function()","util::cli#progname()","nuggets::array::meanmixin#quadratic_mean()","nuggets::range::quantilemixin#quantile()","util::cli#quit()","array#rand()","hash#rand()","io::read()","io::read_write()","nuggets::io::redirectmixin#redirect()","nuggets::file::replacemixin#replace()","string#replace_diacritics()","string#replace_diacritics!()","util::cli#reset()","nuggets::array::meanmixin#rms()","nuggets::array::meanmixin#root_mean_square()","numeric#round_to()","file::ruby()","process::ruby()","util::ruby#ruby_command()","util::ruby#ruby_executable()","util::ruby#ruby_options_to_argv()","util::ruby#ruby_sudo_command()","util::ruby#ruby_supports_fork?()","nuggets::array::runiqmixin#runiq()","nuggets::array::runiqmixin#runiq!()","util::ruby#rvm?()","util::ruby#rvm_path()","util::ruby#rvm_ruby_string()","nuggets::env::setmixin#set()","nuggets::file::extmixin#set_ext()","nuggets::file::extmixin#set_ext!()","numeric#sgn()","util::ruby#shebang_command()","array#shuffle()","array#shuffle!()","array#shuffle_kfy()","array#shuffle_kfy!()","array#shuffle_knuth()","array#shuffle_knuth!()","numeric#sign()","numeric#signum()","nuggets::object::silencemixin#silence()","nuggets::object::singletonclassmixin#singleton_class()","nuggets::object::singletonclassmixin#singleton_class?()","nuggets::object::singletonclassmixin#singleton_instance()","nuggets::object::singletonclassmixin#singleton_object()","array#sort_by_dotted_decimal()","nuggets::array::standarddeviationmixin#standard_deviation()","nuggets::array::standarddeviationmixin#std()","array#strictly_ascending?()","array#strictly_decreasing?()","array#strictly_descending?()","array#strictly_increasing?()","util::ansicolor2css#style()","nuggets::file::submixin#sub()","nuggets::file::submixin#sub!()","nuggets::file::extmixin#sub_ext()","nuggets::file::extmixin#sub_ext!()","string#sub_with_md()","string#sub_with_md!()","net::httpclienterror#success?()","net::httpmultiplechoice#success?()","net::httpredirection#success?()","net::httpresponse#success?()","net::httpservererror#success?()","net::httpsuccess#success?()","nuggets::version::to_a()","integer#to_binary_s()","nuggets::object::booleanmixin#to_bool()","integer#to_dotted_decimal()","array#to_h()","array#to_hash()","numeric#to_hms()","numeric#to_multiple_of()","nuggets::version::to_s()","numeric#to_ymd()","nuggets::object::booleanmixin#true?()","nuggets::string::camelscoremixin#underscore()","nuggets::string::camelscoremixin#underscore!()","nuggets::object::singletonclassmixin#uniclass()","nuggets::object::singletonclassmixin#uniclass?()","nuggets::object::singletonclassmixin#uniobject()","nuggets::hash::unrollmixin#unroll()","string#upcase?()","string#upper_case?()","util::cli#usage()","util::cli::usage()","nuggets::env::userencodingmixin#user_encoding()","nuggets::env::userhomemixin#user_home()","nuggets::array::blankmixin#vain?()","nuggets::hash::blankmixin#vain?()","nuggets::object::blankmixin#vain?()","nuggets::array::variancemixin#var()","nuggets::array::variancemixin#variance()","util::cli::version()","util::cli#version()","nuggets::object::singletonclassmixin#virtual_class()","nuggets::object::singletonclassmixin#virtual_class?()","nuggets::object::singletonclassmixin#virtual_object()","nuggets::object::blankmixin#void?()","util::cli#warn()","nuggets::string::wcmixin#wc()","nuggets::string::wcmixin#wc_c()","nuggets::string::wcmixin#wc_l()","nuggets::string::wcmixin#wc_m()","nuggets::string::wcmixin#wc_w()","nuggets::file::whichmixin#which()","nuggets::file::whichmixin#which_command()","nuggets::env::setmixin#with()","nuggets::env::setmixin#without()","nuggets::string::wcmixin#word_count()","string#word_wrap()","string#word_wrap!()","string#word_wrap_paragraph()","string#word_wrap_paragraph!()","io::write()","io::write_read()","nuggets::string::xormixin#xor()","numeric#ymd()","","",""],"info":[["Array","","Array.html","",""],["Enumerable","","Enumerable.html","",""],["File","","File.html","",""],["Hash","","Hash.html","",""],["IO","","IO.html","",""],["Integer","","Integer.html","",""],["Net","","Net.html","",""],["Net::HTTPClientError","","Net/HTTPClientError.html","",""],["Net::HTTPInformation","","Net/HTTPInformation.html","",""],["Net::HTTPMultipleChoice","","Net/HTTPMultipleChoice.html","",""],["Net::HTTPRedirection","","Net/HTTPRedirection.html","",""],["Net::HTTPResponse","","Net/HTTPResponse.html","",""],["Net::HTTPServerError","","Net/HTTPServerError.html","",""],["Net::HTTPSuccess","","Net/HTTPSuccess.html","",""],["Nuggets","","Nuggets.html","",""],["Nuggets::Array","","Nuggets/Array.html","",""],["Nuggets::Array::BlankMixin","","Nuggets/Array/BlankMixin.html","",""],["Nuggets::Array::CorrelationMixin","","Nuggets/Array/CorrelationMixin.html","",""],["Nuggets::Array::HistogramMixin","","Nuggets/Array/HistogramMixin.html","",""],["Nuggets::Array::LimitMixin","","Nuggets/Array/LimitMixin.html","",""],["Nuggets::Array::MeanMixin","","Nuggets/Array/MeanMixin.html","",""],["Nuggets::Array::MedianMixin","","Nuggets/Array/MedianMixin.html","",""],["Nuggets::Array::ModeMixin","","Nuggets/Array/ModeMixin.html","",""],["Nuggets::Array::RegressionMixin","","Nuggets/Array/RegressionMixin.html","",""],["Nuggets::Array::RuniqMixin","","Nuggets/Array/RuniqMixin.html","",""],["Nuggets::Array::StandardDeviationMixin","","Nuggets/Array/StandardDeviationMixin.html","",""],["Nuggets::Array::VarianceMixin","","Nuggets/Array/VarianceMixin.html","",""],["Nuggets::Env","","Nuggets/Env.html","",""],["Nuggets::Env::SetMixin","","Nuggets/Env/SetMixin.html","",""],["Nuggets::Env::UserEncodingMixin","","Nuggets/Env/UserEncodingMixin.html","",""],["Nuggets::Env::UserHomeMixin","","Nuggets/Env/UserHomeMixin.html","",""],["Nuggets::File","","Nuggets/File.html","",""],["Nuggets::File::ExtMixin","","Nuggets/File/ExtMixin.html","",""],["Nuggets::File::ReplaceMixin","","Nuggets/File/ReplaceMixin.html","",""],["Nuggets::File::SubMixin","","Nuggets/File/SubMixin.html","",""],["Nuggets::File::WhichMixin","","Nuggets/File/WhichMixin.html","",""],["Nuggets::Hash","","Nuggets/Hash.html","",""],["Nuggets::Hash::BlankMixin","","Nuggets/Hash/BlankMixin.html","",""],["Nuggets::Hash::DeepMergeMixin","","Nuggets/Hash/DeepMergeMixin.html","",""],["Nuggets::Hash::NestMixin","","Nuggets/Hash/NestMixin.html","",""],["Nuggets::Hash::UnrollMixin","","Nuggets/Hash/UnrollMixin.html","",""],["Nuggets::IO","","Nuggets/IO.html","",""],["Nuggets::IO::InteractMixin","","Nuggets/IO/InteractMixin.html","",""],["Nuggets::IO::NullMixin","","Nuggets/IO/NullMixin.html","",""],["Nuggets::IO::RedirectMixin","","Nuggets/IO/RedirectMixin.html","",""],["Nuggets::Integer","","Nuggets/Integer.html","",""],["Nuggets::Integer::LengthMixin","","Nuggets/Integer/LengthMixin.html","",""],["Nuggets::Integer::MapMixin","","Nuggets/Integer/MapMixin.html","",""],["Nuggets::Object","","Nuggets/Object.html","",""],["Nuggets::Object::BlankMixin","","Nuggets/Object/BlankMixin.html","",""],["Nuggets::Object::BooleanMixin","","Nuggets/Object/BooleanMixin.html","",""],["Nuggets::Object::MSendMixin","","Nuggets/Object/MSendMixin.html","",""],["Nuggets::Object::SilenceMixin","","Nuggets/Object/SilenceMixin.html","",""],["Nuggets::Object::SingletonClassMixin","","Nuggets/Object/SingletonClassMixin.html","",""],["Nuggets::Proc","","Nuggets/Proc.html","",""],["Nuggets::Proc::BindMixin","","Nuggets/Proc/BindMixin.html","",""],["Nuggets::Range","","Nuggets/Range.html","",""],["Nuggets::Range::QuantileMixin","","Nuggets/Range/QuantileMixin.html","",""],["Nuggets::String","","Nuggets/String.html","",""],["Nuggets::String::CamelscoreMixin","","Nuggets/String/CamelscoreMixin.html","",""],["Nuggets::String::EvaluateMixin","","Nuggets/String/EvaluateMixin.html","",""],["Nuggets::String::WcMixin","","Nuggets/String/WcMixin.html","",""],["Nuggets::String::XorMixin","","Nuggets/String/XorMixin.html","",""],["Nuggets::URI","","Nuggets/URI.html","",""],["Nuggets::URI::ContentTypeMixin","","Nuggets/URI/ContentTypeMixin.html","",""],["Nuggets::URI::ExistMixin","","Nuggets/URI/ExistMixin.html","",""],["Nuggets::URI::RedirectMixin","","Nuggets/URI/RedirectMixin.html","",""],["Nuggets::Version","","Nuggets/Version.html","",""],["Numeric","","Numeric.html","",""],["Object","","Object.html","",""],["Object::ContentType","","Util/ContentType.html","",""],["Proc","","Proc.html","",""],["Process","","Process.html","",""],["Range","","Range.html","",""],["String","","String.html","",""],["String::Case","","String/Case.html","",""],["Tempfile","","Tempfile.html","",""],["URI","","URI.html","",""],["Util","","Util.html","",""],["Util::ANSIColor2CSS","","Util/ANSIColor2CSS.html","",""],["Util::CLI","","Util/CLI.html","",""],["Util::ContentType","","Util/ContentType.html","",""],["Util::I18n","","Util/I18n.html","",""],["Util::Pluggable","","Util/Pluggable.html","",""],["Util::Ruby","","Util/Ruby.html","","<p>Heavily based on Phusion Passenger’s PlatformInfo module; see their code.\n"],["%","Array","Array.html#method-i-25","(args)","<p>Format–Uses the first string in <em>array</em> for which the\ncorresponding combination of <em>other_array</em> does not …\n"],["Nuggets","Object","Object.html#method-i-Nuggets","(*nuggets)","<p>Load selected <code>nuggets</code>.\n<p>Examples:\n\n<pre># All String nuggets\nNuggets(:string)\nNuggets(String)\n\n# Only 'msub' and ...</pre>\n"],["^","Nuggets::String::XorMixin","Nuggets/String/XorMixin.html#method-i-5E","(other, require_same_length = false)",""],["_block_for_all_any_extended","Enumerable","Enumerable.html#method-i-_block_for_all_any_extended","(object, default, operator, &block)","<p>Common argument processing for extended versions of #all? and #any?.\n"],["_nuggets_original_all?","Enumerable","Enumerable.html#method-i-_nuggets_original_all-3F","(object = default = true, operator = :===, &block)",""],["_nuggets_original_any?","Enumerable","Enumerable.html#method-i-_nuggets_original_any-3F","(object = default = true, operator = :===, &block)",""],["_nuggets_original_max","Enumerable","Enumerable.html#method-i-_nuggets_original_max","(what = nil)",""],["_nuggets_original_max_by","Enumerable","Enumerable.html#method-i-_nuggets_original_max_by","(by)",""],["_nuggets_original_min","Enumerable","Enumerable.html#method-i-_nuggets_original_min","(what = nil)",""],["_nuggets_original_min_by","Enumerable","Enumerable.html#method-i-_nuggets_original_min_by","(by)",""],["_nuggets_original_minmax","Enumerable","Enumerable.html#method-i-_nuggets_original_minmax","(meth, what)",""],["_nuggets_original_minmax_by","Enumerable","Enumerable.html#method-i-_nuggets_original_minmax_by","(meth, by)",""],["_nuggets_original_open","Tempfile","Tempfile.html#method-c-_nuggets_original_open","(*args)",""],["_nuggets_original_read","IO","IO.html#method-c-_nuggets_original_read","(name, *args)",""],["abort","Util::CLI","Util/CLI.html#method-i-abort","(msg = nil, status = 1)",""],["agrep","Enumerable","Enumerable.html#method-i-agrep","(pattern, distance = 0)","<p>Returns an array of all elements in <em>enum</em> for which\n<code>pattern</code> approximately matches <code>element</code> (see\nAmatch::Levenshtein#search …\n"],["agrep","IO","IO.html#method-c-agrep","(fd, pattern, distance = 0, &block)",""],["all?","Enumerable","Enumerable.html#method-i-all-3F","(object = default = true, operator = :===, &block)","<p>Adds the ability to pass an <code>object</code> instead of a block, which\nwill then be tested against each item in …\n"],["annotated_histogram","Nuggets::Array::HistogramMixin","Nuggets/Array/HistogramMixin.html#method-i-annotated_histogram","()","<p>Calculates the #histogram for <em>array</em> and yields each histogram item\n(see HistogramItem) to the block or …\n"],["ansicolor2css","String","String.html#method-i-ansicolor2css","()",""],["ansicolour2css","String","String.html#method-i-ansicolour2css","()",""],["any?","Enumerable","Enumerable.html#method-i-any-3F","(object = default = true, operator = :===, &block)","<p>Adds the ability to pass an <code>object</code> instead of a block, which\nwill then be tested against each item in …\n"],["append","IO","IO.html#method-c-append","(name, binary = false)","<p>Opens <code>name</code> with mode <code>a</code>.\n"],["append_read","IO","IO.html#method-c-append_read","(name, binary = false)","<p>Opens <code>name</code> with mode <code>a+</code>.\n"],["arithmetic_mean","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-arithmetic_mean","(&block)","<p>Calculates the arithmetic mean of the values in <em>array</em>.\n<p>An optional block may be passed to provide a weight …\n"],["ascending?","Array","Array.html#method-i-ascending-3F","(strict = false)","<p>Check whether <em>array</em> is (strictly) ascending.\n"],["ask","Util::CLI","Util/CLI.html#method-i-ask","(question, &block)",""],["at","Hash","Hash.html#method-i-at","(what)","<p>Returns the key/value pair of <em>hash</em> at key position\n<code>what</code>. Remember that hashes might not have the intended …\n"],["at_least","Numeric","Numeric.html#method-i-at_least","(min)",""],["at_most","Numeric","Numeric.html#method-i-at_most","(max)",""],["average","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-average","(&block)",""],["avg","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-avg","(&block)",""],["between","Nuggets::Array::LimitMixin","Nuggets/Array/LimitMixin.html#method-i-between","(min, max, uniq = true)",""],["between","Numeric","Numeric.html#method-i-between","(min, max)",""],["bind","Nuggets::Proc::BindMixin","Nuggets/Proc/BindMixin.html#method-i-bind","(object)","<p>Straight from Rails’ ActiveSupport – effectively binds <em>proc</em> to\n<code>object</code>.\n"],["blank?","Nuggets::Object::BlankMixin","Nuggets/Object/BlankMixin.html#method-i-blank-3F","(*modifiers)","<p>Basically a short-cut to <code>object.nil? || object.empty?</code>.\n"],["boolean?","Nuggets::Object::BooleanMixin","Nuggets/Object/BooleanMixin.html#method-i-boolean-3F","()",""],["byte_count","Nuggets::String::WcMixin","Nuggets/String/WcMixin.html#method-i-byte_count","()","<p>Count number of bytes in <em>str</em>.\n"],["camelcase","Nuggets::String::CamelscoreMixin","Nuggets/String/CamelscoreMixin.html#method-i-camelcase","()","<p>Returns the CamelCase form of <em>str</em>.\n"],["camelcase!","Nuggets::String::CamelscoreMixin","Nuggets/String/CamelscoreMixin.html#method-i-camelcase-21","()","<p>Replaces <em>str</em> with its CamelCase form and returns <em>str</em>.\n"],["camelize","Nuggets::String::CamelscoreMixin","Nuggets/String/CamelscoreMixin.html#method-i-camelize","()",""],["camelize!","Nuggets::String::CamelscoreMixin","Nuggets/String/CamelscoreMixin.html#method-i-camelize-21","()",""],["cap","Nuggets::Array::LimitMixin","Nuggets/Array/LimitMixin.html#method-i-cap","(max)",""],["capitalize_first","String","String.html#method-i-capitalize_first","()","<p>Capitalizes the first character in <code>str</code>, but without downcasing\nthe rest like String#capitalize does. …\n"],["capitalize_first!","String","String.html#method-i-capitalize_first-21","()","<p>Destructive version of #capitalize_first.\n"],["capitalized?","String","String.html#method-i-capitalized-3F","()","<p>Tell whether <em>str</em> is capitalized.\n"],["case","String","String.html#method-i-case","()","<p>Returns a symbol indicating the case of <em>str</em>.\n"],["ceil_to","Numeric","Numeric.html#method-i-ceil_to","(target)","<p>Returns the smallest multiple of <code>target</code> greater than or equal\nto <em>num</em>.\n"],["char_count","Nuggets::String::WcMixin","Nuggets/String/WcMixin.html#method-i-char_count","()","<p>Count number of characters in <em>str</em>.\n"],["chomp_ext","Nuggets::File::ExtMixin","Nuggets/File/ExtMixin.html#method-i-chomp_ext","(path, ext = extname(path))","<p>Returns a copy of <code>path</code> with its file extension removed.\n"],["chomp_ext!","Nuggets::File::ExtMixin","Nuggets/File/ExtMixin.html#method-i-chomp_ext-21","(path, ext = extname(path))","<p>Modifies <code>path</code> in place as described for #chomp_ext, returning\n<code>path</code>, or <code>nil</code> if no modifications were made. …\n"],["clear","Util::ANSIColor2CSS","Util/ANSIColor2CSS.html#method-i-clear","(attributes)",""],["comb","Array","Array.html#method-i-comb","(*sizes)","<p>Returns an array of arrays of each possible <code>n</code>-combination of\n<em>array</em> for each given <code>n</code>. If a block is given, …\n"],["command_for_ruby_tool","Util::Ruby","Util/Ruby.html#method-i-command_for_ruby_tool","(name)","<p>Returns the correct command string for invoking the <code>name</code>\nexecutable that belongs to the current Ruby …\n"],["constantize","Nuggets::String::CamelscoreMixin","Nuggets/String/CamelscoreMixin.html#method-i-constantize","(base = ::Object)","<p>Returns the constant pointed to by <em>str</em>, relative to\n<code>base</code>.\n"],["content_type","Nuggets::URI::ContentTypeMixin","Nuggets/URI/ContentTypeMixin.html#method-i-content_type","(uri)","<p>Return the content type of <code>uri</code>, or <code>nil</code> if not\nfound.\n"],["convert","Util::ANSIColor2CSS","Util/ANSIColor2CSS.html#method-i-convert","(string)",""],["corr","Nuggets::Array::CorrelationMixin","Nuggets/Array/CorrelationMixin.html#method-i-corr","()",""],["correlation_coefficient","Nuggets::Array::CorrelationMixin","Nuggets/Array/CorrelationMixin.html#method-i-correlation_coefficient","()","<p>Calculates the Pearson product-moment correlation coefficient for the\n<code>{x,y}</code> pairs in <em>array</em>. If <em>array</em> …\n"],["count_by_re","Nuggets::String::WcMixin","Nuggets/String/WcMixin.html#method-i-count_by_re","(re)","<p>Count number of occurrences of <code>re</code> in <em>str</em>.\n"],["count_by_re2","Nuggets::String::WcMixin","Nuggets/String/WcMixin.html#method-i-count_by_re2","(re)","<p>A more memory-efficient version of #count_by_re.\n"],["cov","Nuggets::Array::VarianceMixin","Nuggets/Array/VarianceMixin.html#method-i-cov","()",""],["covariance","Nuggets::Array::VarianceMixin","Nuggets/Array/VarianceMixin.html#method-i-covariance","()","<p>Calculates the covariance of the <code>{x,y}</code> pairs in\n<em>array</em>. If <em>array</em> only contains values instead of pairs,\n…\n"],["decreasing?","Array","Array.html#method-i-decreasing-3F","(strict = false)",""],["deep_merge","Nuggets::Hash::DeepMergeMixin","Nuggets/Hash/DeepMergeMixin.html#method-i-deep_merge","(other)","<p>Merges nested hashes recursively (see Hash#merge).\n"],["deep_merge!","Nuggets::Hash::DeepMergeMixin","Nuggets/Hash/DeepMergeMixin.html#method-i-deep_merge-21","(other)","<p>Destructive version of #deep_merge.\n"],["deep_update","Nuggets::Hash::DeepMergeMixin","Nuggets/Hash/DeepMergeMixin.html#method-i-deep_update","(other)",""],["defaults","Util::CLI","Util/CLI.html#method-c-defaults","()",""],["descending?","Array","Array.html#method-i-descending-3F","(strict = false)","<p>Check whether <em>array</em> is (strictly) descending.\n"],["digit_count","Nuggets::Integer::LengthMixin","Nuggets/Integer/LengthMixin.html#method-i-digit_count","()","<p>Returns the digit count of <em>int</em>. [ruby-core:22383]\n"],["downcase?","String","String.html#method-i-downcase-3F","()",""],["eigenclass","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-eigenclass","()",""],["eigenclass?","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-eigenclass-3F","()",""],["eigenobject","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-eigenobject","()",""],["evaluate","Nuggets::String::EvaluateMixin","Nuggets/String/EvaluateMixin.html#method-i-evaluate","(binding = ::TOPLEVEL_BINDING, filename = nil, lineno = nil)","<p>Basically turns Kernel#eval into an instance method of String – inspired\nby Ruby Cookbook example 1.3. …\n"],["execute","Util::CLI","Util/CLI.html#method-c-execute","(*args)",""],["execute","Util::CLI","Util/CLI.html#method-i-execute","(arguments = ::ARGV, *inouterr)",""],["exist?","Nuggets::URI::ExistMixin","Nuggets/URI/ExistMixin.html#method-i-exist-3F","(uri)","<p>Checks whether the URI <code>uri</code> exists by performing a\n<code>HEAD</code> request. If successful, yields the response to …\n"],["exists?","Nuggets::URI::ExistMixin","Nuggets/URI/ExistMixin.html#method-i-exists-3F","(uri)",""],["exit","Util::CLI","Util/CLI.html#method-i-exit","(status = 0)",""],["extended","Nuggets::File::SubMixin","Nuggets/File/SubMixin.html#method-c-extended","(base)",""],["extended","Nuggets::URI::ContentTypeMixin","Nuggets/URI/ContentTypeMixin.html#method-c-extended","(base)",""],["extended","Nuggets::URI::ExistMixin","Nuggets/URI/ExistMixin.html#method-c-extended","(base)",""],["f!","Integer","Integer.html#method-i-f-21","()",""],["fac","Integer","Integer.html#method-i-fac","()",""],["factorial","Integer","Integer.html#method-i-factorial","()","<p>Calculate the factorial of <em>int</em>. To use the memoized version:\n<code>Integer.send(:alias_method, :factorial,</code> …\n"],["factorial_memoized","Integer","Integer.html#method-i-factorial_memoized","()","<p>Calculate the factorial of <em>int</em> with the help of memoization (Which\ngives a considerable speedup for repeated …\n"],["false?","Nuggets::Object::BooleanMixin","Nuggets/Object/BooleanMixin.html#method-i-false-3F","()",""],["first","Hash","Hash.html#method-i-first","()","<p>Returns the “first” key/value pair of <em>hash</em>.\n"],["flatten_once","Array","Array.html#method-i-flatten_once","()","<p>Flatten <em>array</em> by <em>one</em> level only. Pretty straight-forward\nport of David Alan Black’s flattenx C implementation …\n"],["flatten_once!","Array","Array.html#method-i-flatten_once-21","()","<p>Destructive version of #flatten_once.\n"],["floor_to","Numeric","Numeric.html#method-i-floor_to","(target)","<p>Returns the largest multiple of <code>target</code> less than or equal to\n<em>num</em>.\n"],["follow_redirect","Nuggets::URI::RedirectMixin","Nuggets/URI/RedirectMixin.html#method-i-follow_redirect","(uri, steps = URI_REDIRECT_MAX_STEPS, cache = URI_REDIRECT_HTTP_CACHE)","<p>Performs any HTTP request on <code>uri</code> while following at most\n<code>steps</code> redirects. Accepts both strings and URI …\n"],["format","Util::ANSIColor2CSS","Util/ANSIColor2CSS.html#method-i-format","(attributes)",""],["formatted_histogram","Nuggets::Array::HistogramMixin","Nuggets/Array/HistogramMixin.html#method-i-formatted_histogram","(format = :default, indicator = '=')","<p>Returns the #histogram of <em>array</em> as a formatted String according to\n<code>format</code>, using <code>indicator</code> to draw the …\n"],["from_dotted_decimal","String","String.html#method-i-from_dotted_decimal","()","<p>Converts <em>str</em> from dotted-decimal notation to integer.\n"],["generalized_mean","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-generalized_mean","(exponent, &block)","<p>Calculates the generalized mean of the values in <em>array</em> for\n<code>exponent</code>. Returns the #geometric_mean if  …\n"],["generic_opts","Util::CLI","Util/CLI.html#method-i-generic_opts","(opts)",""],["geomean","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-geomean","()",""],["geometric_mean","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-geometric_mean","()","<p>Calculates the geometric mean of the values in <em>array</em>.\n<p>An optional block may be passed to provide a weight …\n"],["get_redirect","Nuggets::URI::RedirectMixin","Nuggets/URI/RedirectMixin.html#method-i-get_redirect","(uri, steps = URI_REDIRECT_MAX_STEPS)","<p>Performs a <code>GET</code> request on <code>uri</code> while following at\nmost <code>steps</code> redirects. If successful, yields the response …\n"],["ghost_class","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-ghost_class","()",""],["ghost_class?","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-ghost_class-3F","()",""],["ghost_object","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-ghost_object","()",""],["gimme_match_data!","String","String.html#method-c-gimme_match_data-21","()","<p>Replaces the traditional substitution methods with their MatchData passing\nequivalents. USE WITH CAUTION …\n"],["gsub","Nuggets::File::SubMixin","Nuggets/File/SubMixin.html#method-i-gsub","(name, *args)","<p>Calls String#gsub! on file <code>name</code>‘s contents with\n<code>args</code> and (optional) <code>block</code> and returns the new\ncontent. …\n"],["gsub!","Nuggets::File::SubMixin","Nuggets/File/SubMixin.html#method-i-gsub-21","(name, *args)","<p>Calls String#gsub! on file <code>name</code>‘s contents with\n<code>args</code> and (optional) <code>block</code> and replaces the file\nwith …\n"],["gsub_with_md","String","String.html#method-i-gsub_with_md","(pattern, replacement = nil)","<p>Just like #gsub, but passes the MatchData object instead of the current\nmatch string to the block.\n"],["gsub_with_md!","String","String.html#method-i-gsub_with_md-21","(pattern, replacement = nil)","<p>Destructive version of #gsub_with_md.\n"],["harmean","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-harmean","(&block)",""],["harmonic_mean","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-harmonic_mean","(&block)","<p>Calculates the harmonic mean of the values in <em>array</em>.\n<p>An optional block may be passed to provide a weight …\n"],["head_redirect","Nuggets::URI::RedirectMixin","Nuggets/URI/RedirectMixin.html#method-i-head_redirect","(uri, steps = URI_REDIRECT_MAX_STEPS)","<p>Performs a <code>HEAD</code> request on <code>uri</code> while following at\nmost <code>steps</code> redirects. If successful, yields the response …\n"],["histogram","Nuggets::Array::HistogramMixin","Nuggets/Array/HistogramMixin.html#method-i-histogram","()","<p>Calculates the frequency histogram of the values in <em>array</em>. Returns\na Hash that maps any value, or the …\n"],["hms","Numeric","Numeric.html#method-i-hms","()","<p>Converts <em>num</em> into hour, minute, and second portions.\n"],["in_order","Array","Array.html#method-i-in_order","(*ordered)","<p>Force order, but ignore non-existing and keep remaining.\n<p>Examples:\n\n<pre>[:created_at, :email, :login, :updated_at].in_order(:login, ...</pre>\n"],["in_order","Hash","Hash.html#method-i-in_order","(*ordered)","<p>Returns <code>hash#to_a</code>, in forced order (cf. Array#in_order).\n<p>Examples:\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">a</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">1</span>, :<span class=\"ruby-identifier\">b</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">2</span>, :<span class=\"ruby-identifier\">c</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">3</span> }.<span class=\"ruby-identifier\">in_order</span>(:<span class=\"ruby-identifier\">b</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["in_order!","Array","Array.html#method-i-in_order-21","(*ordered)","<p>Destructive version of #in_order.\n"],["included","Nuggets::Array::CorrelationMixin","Nuggets/Array/CorrelationMixin.html#method-c-included","(base)",""],["included","Nuggets::Array::ModeMixin","Nuggets/Array/ModeMixin.html#method-c-included","(base)",""],["included","Nuggets::Array::RegressionMixin","Nuggets/Array/RegressionMixin.html#method-c-included","(base)",""],["included","Nuggets::Array::StandardDeviationMixin","Nuggets/Array/StandardDeviationMixin.html#method-c-included","(base)",""],["increasing?","Array","Array.html#method-i-increasing-3F","(strict = false)",""],["init","Util::CLI","Util/CLI.html#method-i-init","(*args)",""],["insert","Hash","Hash.html#method-i-insert","(other, &block)","<p>Inserts <code>other</code> into <em>hash</em>, while merging existing\nvalues instead of just overwriting. Uses default Hash#merge …\n"],["insert!","Hash","Hash.html#method-i-insert-21","(other)","<p>Destructive version of #insert.\n"],["interact","Nuggets::IO::InteractMixin","Nuggets/IO/InteractMixin.html#method-i-interact","(input, output, timeout = nil, maxlen = 2 ** 16)","<p>Interact with both ends of a pipe in a non-blocking manner.\n<p><code>input</code> represents the sending end and is a …\n"],["interact_ruby","Process","Process.html#method-c-interact_ruby","(input, *args)",""],["last","Hash","Hash.html#method-i-last","()","<p>Returns the “last” key/value pair of <em>hash</em>.\n"],["length","Nuggets::Integer::LengthMixin","Nuggets/Integer/LengthMixin.html#method-i-length","()","<p>Returns the length of <em>int</em>.\n"],["limit","Nuggets::Array::LimitMixin","Nuggets/Array/LimitMixin.html#method-i-limit","(min, max, uniq = true)","<p>Returns a new array of all distinct values in <em>array</em> limited to\n<code>min</code> and <code>max</code> (cf. Numeric#limit). If\n<code>uniq</code> …\n"],["limit","Numeric","Numeric.html#method-i-limit","(min, max)","<p>Returns <code>min</code> if that’s larger than <em>num</em>, or\n<code>max</code> if that’s smaller than <em>num</em>. Otherwise returns\n<em>num</em>.\n"],["line_count","Nuggets::String::WcMixin","Nuggets/String/WcMixin.html#method-i-line_count","()","<p>Count number of lines in <em>str</em>.\n"],["linear_least_squares","Nuggets::Array::RegressionMixin","Nuggets/Array/RegressionMixin.html#method-i-linear_least_squares","()","<p>Calculates the linear least squares regression for the <code>{x,y}</code>\npairs in <em>array</em>. If <em>array</em> only contains values …\n"],["llsq","Nuggets::Array::RegressionMixin","Nuggets/Array/RegressionMixin.html#method-i-llsq","()",""],["load_config","Util::CLI","Util/CLI.html#method-i-load_config","(file = options[:config] || defaults[:config])",""],["load_env_plugins","Util::Pluggable","Util/Pluggable.html#method-i-load_env_plugins","(name)",""],["load_gem_plugins","Util::Pluggable","Util/Pluggable.html#method-i-load_gem_plugins","(name)",""],["load_path_plugins","Util::Pluggable","Util/Pluggable.html#method-i-load_path_plugins","(name)",""],["load_plugin_file","Util::Pluggable","Util/Pluggable.html#method-i-load_plugin_file","(plugin)",""],["load_plugin_files","Util::Pluggable","Util/Pluggable.html#method-i-load_plugin_files","(plugins)",""],["load_plugins","Util::Pluggable","Util/Pluggable.html#method-i-load_plugins","(name = plugin_filename)",""],["load_plugins_for","Util::Pluggable","Util/Pluggable.html#method-c-load_plugins_for","(*klasses)",""],["loaded_plugins","Util::Pluggable","Util/Pluggable.html#method-i-loaded_plugins","()",""],["locate_ruby_tool","Util::Ruby","Util/Ruby.html#method-i-locate_ruby_tool","(name)","<p>Locates a Ruby tool command <code>name</code>, e.g. ‘gem’, ‘rake’,\n‘bundle’, etc. Instead of naively looking in $ …\n"],["locate_ruby_tool_by_basename","Util::Ruby","Util/Ruby.html#method-i-locate_ruby_tool_by_basename","(name)",""],["lower_case?","String","String.html#method-i-lower_case-3F","()","<p>Tell whether <em>str</em> is all lower case.\n"],["map_positive","Nuggets::Integer::MapMixin","Nuggets/Integer/MapMixin.html#method-i-map_positive","()","<p>Creates a bijection from <strong>Z</strong> to <strong>N</strong>, i.e., it\nmaps <em>int</em> to a positive integer.\n"],["max","Enumerable","Enumerable.html#method-i-max","(what = nil)","<p>Maximum #minmax. If <code>what</code> is omitted, or <code>nil</code>, the\noriginal Enumerable#max is called.\n"],["max","Numeric","Numeric.html#method-i-max","(max)","<p>Returns <em>num</em> or <code>max</code>, whatever is smaller.\n"],["max_by","Enumerable","Enumerable.html#method-i-max_by","(by)","<p>Maximum #minmax_by.\n"],["mean","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-mean","(&block)",""],["median","Nuggets::Array::MedianMixin","Nuggets/Array/MedianMixin.html#method-i-median","(prefer = nil)","<p>Determines the median of the values in <em>array</em>. <em>array</em> must\nbe sortable.\n<p>If <em>array</em> contains an even number …\n"],["merge_config","Util::CLI","Util/CLI.html#method-i-merge_config","(args = [config, defaults])",""],["metaclass","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-metaclass","()",""],["metaclass?","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-metaclass-3F","()",""],["metaobject","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-metaobject","()",""],["min","Enumerable","Enumerable.html#method-i-min","(what = nil)","<p>Minimum #minmax. If <code>what</code> is omitted, or <code>nil</code>, the\noriginal Enumerable#min is called.\n"],["min","Numeric","Numeric.html#method-i-min","(min)","<p>Returns <em>num</em> or <code>min</code>, whatever is larger.\n"],["min_by","Enumerable","Enumerable.html#method-i-min_by","(by)","<p>Minimum #minmax_by.\n"],["minkowski_mean","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-minkowski_mean","(exponent, &block)",""],["minmax","Enumerable","Enumerable.html#method-i-minmax","(meth, what)","<p>Finds the #minmax_by according to <code>what</code> and returns that\n“what”.\n<p>Example:\n\n<pre>%w[a bcd ef].max(:length) ...</pre>\n"],["minmax_by","Enumerable","Enumerable.html#method-i-minmax_by","(meth, by)","<p>Finds the maximum/minimum (or whatever <code>meth</code> is) value in\n<em>enum</em> according to <code>by</code> (which may be a symbol/string\n…\n"],["mixed_case?","String","String.html#method-i-mixed_case-3F","()","<p>Tell whether <em>str</em> is mixed case.\n"],["mode","Nuggets::Array::ModeMixin","Nuggets/Array/ModeMixin.html#method-i-mode","(all = false, &block)","<p>Returns the mode of the values in <em>array</em> (via #histogram).\n<p>If parameter <code>true</code> is passed, an Array of all …\n"],["modes","Nuggets::Array::ModeMixin","Nuggets/Array/ModeMixin.html#method-i-modes","(&block)","<p>Returns an Array of all modes of the values in <em>array</em> (see #mode).\n"],["monotone?","Array","Array.html#method-i-monotone-3F","(operator)","<p>Check whether <em>array</em> is monotone according to\n<code>operator</code>.\n"],["monotonic?","Array","Array.html#method-i-monotonic-3F","(operator)",""],["msend","Nuggets::Object::MSendMixin","Nuggets/Object/MSendMixin.html#method-i-msend","(*messages)","<p>Sends <em>object</em> multiple <code>messages</code> and returns an array\nof the individual return values.\n"],["msub","String","String.html#method-i-msub","(*substitutions)","<p>Performs <em>multiple</em> substitutions on <em>str</em> with order being\ntaken into account (thus results of previous …\n"],["msub!","String","String.html#method-i-msub-21","(*substitutions)","<p>Destructive version of #msub.\n"],["negate","Nuggets::Object::BooleanMixin","Nuggets/Object/BooleanMixin.html#method-i-negate","()",""],["negative?","Numeric","Numeric.html#method-i-negative-3F","()",""],["nest","Nuggets::Hash::NestMixin","Nuggets/Hash/NestMixin.html#method-i-nest","(depth = 0, value = default = true)","<p>Creates a nested hash, <code>depth</code> levels deep. The final hash will\nreceive a default value of <code>value</code> or, if …\n"],["new","Util::CLI","Util/CLI.html#method-c-new","(defaults = nil, *args)",""],["non_negative?","Numeric","Numeric.html#method-i-non_negative-3F","()",""],["nsub","String","String.html#method-i-nsub","(*args)","<p>Returns a copy of <em>str</em> with the <em>first</em> <code>count</code>\noccurrences of pattern replaced with either <code>replacement</code> or …\n"],["nsub!","String","String.html#method-i-nsub-21","(*args)","<p>Performs the substitutions of #nsub in place, returning <em>str</em>, or\n<code>nil</code> if no substitutions were performed. …\n"],["of","Util::ContentType","Util/ContentType.html#method-i-of","(path)","<p>Get the MIME-Type of the file living at <code>path</code>. Either by\nlooking directly into the file (requires FileMagic …\n"],["of","Util::ContentType","Util/ContentType.html#method-i-of","(path)","<p>Get the MIME-Type of the file living at <code>path</code>. Either by\nlooking directly into the file (requires FileMagic …\n"],["only","Array","Array.html#method-i-only","(relax = size == 1)","<p>Returns the only element of <em>array</em>. Raises an IndexError if\n<em>array</em>’s size is not 1, unless parameter <code>true</code> …\n"],["only","Hash","Hash.html#method-i-only","(relax = size == 1, split = false)","<p>Returns the only key/value pair of <em>hash</em>. Raises an IndexError if\n<em>hash</em>’s size is not 1, unless parameter …\n"],["only_pair","Hash","Hash.html#method-i-only_pair","(relax = size == 1)","<p>Returns the only key/value pair of <em>hash</em> as an array. Raises an\nIndexError if <em>hash</em>’s size is not 1, unless …\n"],["open","Tempfile","Tempfile.html#method-c-open","(*args)","<p>If no block is given, this is a synonym for new().\n<p>If a block is given, it will be passed tempfile as …\n"],["open_file_or_std","Util::CLI","Util/CLI.html#method-i-open_file_or_std","(file, write = false)",""],["open_with_mode","IO","IO.html#method-c-open_with_mode","(name, mode, binary = false)","<p>Just a helper to DRY things up.\n"],["option_parser","Util::CLI","Util/CLI.html#method-i-option_parser","()",""],["opts","Util::CLI","Util/CLI.html#method-i-opts","(opts)",""],["parent_const_get","Util::CLI","Util/CLI.html#method-c-parent_const_get","(const, range = 0...-1)",""],["parse_options","Util::CLI","Util/CLI.html#method-i-parse_options","(arguments)",""],["plugin_filename","Util::Pluggable","Util/Pluggable.html#method-i-plugin_filename","()",""],["pmcc","Nuggets::Array::CorrelationMixin","Nuggets/Array/CorrelationMixin.html#method-i-pmcc","()",""],["pmf","Nuggets::Array::HistogramMixin","Nuggets/Array/HistogramMixin.html#method-i-pmf","(&block)",""],["positive?","Numeric","Numeric.html#method-i-positive-3F","()",""],["post_opts","Util::CLI","Util/CLI.html#method-i-post_opts","(opts)",""],["power_mean","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-power_mean","(exponent, &block)",""],["pre_opts","Util::CLI","Util/CLI.html#method-i-pre_opts","(opts)",""],["probability_mass_function","Nuggets::Array::HistogramMixin","Nuggets/Array/HistogramMixin.html#method-i-probability_mass_function","(&block)","<p>Calculates the probability mass function (normalized histogram) of the\nvalues in <em>array</em>. Returns a Hash …\n"],["progname","Util::CLI","Util/CLI.html#method-i-progname","()",""],["quadratic_mean","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-quadratic_mean","(&block)",""],["quantile","Nuggets::Range::QuantileMixin","Nuggets/Range/QuantileMixin.html#method-i-quantile","(value, order = 100)","<p>Determines the <code>order</code>-quantile of <code>value</code> in\n<em>range</em>.\n"],["quit","Util::CLI","Util/CLI.html#method-i-quit","(msg = nil, include_usage = msg != false)",""],["rand","Array","Array.html#method-i-rand","()","<p>Randomly pick an item from <em>array</em>.\n"],["rand","Hash","Hash.html#method-i-rand","()","<p>Returns a random key/value pair of <em>hash</em>.\n"],["read","IO","IO.html#method-c-read","(name, *args)","<p>Opens <code>name</code> with mode <code>r</code>. NOTE: With no associated\nblock, acts like the original IO::read, not like IO::new …\n"],["read_write","IO","IO.html#method-c-read_write","(name, binary = false)","<p>Opens <code>name</code> with mode <code>r+</code>.\n"],["redirect","Nuggets::IO::RedirectMixin","Nuggets/IO/RedirectMixin.html#method-i-redirect","(target = NullMixin::NULL, mode = 'w')",""],["replace","Nuggets::File::ReplaceMixin","Nuggets/File/ReplaceMixin.html#method-i-replace","(name, create_if_missing = false, &block)","<p>Replaces the contents of file <code>name</code> with the result of the\nblock. Yields the file’s contents to the block …\n"],["replace_diacritics","String","String.html#method-i-replace_diacritics","()","<p>Substitutes any diacritics in <em>str</em> with their replacements as per\nUtil::I18n::DIACRITICS.\n"],["replace_diacritics!","String","String.html#method-i-replace_diacritics-21","()","<p>Destructive version of #replace_diacritics.\n"],["reset","Util::CLI","Util/CLI.html#method-i-reset","(stdin = ::STDIN, stdout = ::STDOUT, stderr = ::STDERR)",""],["rms","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-rms","(&block)",""],["root_mean_square","Nuggets::Array::MeanMixin","Nuggets/Array/MeanMixin.html#method-i-root_mean_square","(&block)","<p>Calculates the root mean square (quadratic mean) of the values in\n<em>array</em>.\n<p>An optional block may be passed …\n"],["round_to","Numeric","Numeric.html#method-i-round_to","(target)","<p>Rounds <em>num</em> to the nearest multiple of <code>target</code>.\n"],["ruby","File","File.html#method-c-ruby","()",""],["ruby","Process","Process.html#method-c-ruby","(*args)",""],["ruby_command","Util::Ruby","Util/Ruby.html#method-i-ruby_command","()","<p>Returns correct command for invoking the current Ruby interpreter. In case\nof RVM this function will …\n"],["ruby_executable","Util::Ruby","Util/Ruby.html#method-i-ruby_executable","()","<p>Returns the full path to the current Ruby interpreter’s executable file.\nThis might not be the actual …\n"],["ruby_options_to_argv","Util::Ruby","Util/Ruby.html#method-i-ruby_options_to_argv","(args, ruby_command = ruby_command)",""],["ruby_sudo_command","Util::Ruby","Util/Ruby.html#method-i-ruby_sudo_command","()","<p>Returns either ‘sudo’ or ‘rvmsudo’ depending on whether the current\nRuby interpreter is managed by RVM …\n"],["ruby_supports_fork?","Util::Ruby","Util/Ruby.html#method-i-ruby_supports_fork-3F","()","<p>Returns whether the Ruby interpreter supports process forking.\n"],["runiq","Nuggets::Array::RuniqMixin","Nuggets/Array/RuniqMixin.html#method-i-runiq","()","<p>Reverse #uniq.\n"],["runiq!","Nuggets::Array::RuniqMixin","Nuggets/Array/RuniqMixin.html#method-i-runiq-21","()","<p>Reverse #uniq!.\n"],["rvm?","Util::Ruby","Util/Ruby.html#method-i-rvm-3F","()","<p>Returns whether the current Ruby interpreter is managed by RVM.\n"],["rvm_path","Util::Ruby","Util/Ruby.html#method-i-rvm_path","()","<p>If the current Ruby interpreter is managed by RVM, returns the directory in\nwhich RVM places its working …\n"],["rvm_ruby_string","Util::Ruby","Util/Ruby.html#method-i-rvm_ruby_string","()","<p>If the current Ruby interpreter is managed by RVM, returns the RVM name\nwhich identifies the current …\n"],["set","Nuggets::Env::SetMixin","Nuggets/Env/SetMixin.html#method-i-set","(env = {}, clear = true)","<p>Overrides ENV with <code>env</code>, clearing it beforehand if\n<code>clear</code> is <code>true</code>. If a block is given, restores ENV\nto …\n"],["set_ext","Nuggets::File::ExtMixin","Nuggets/File/ExtMixin.html#method-i-set_ext","(path, new_ext, ext = extname(path))","<p>Returns a copy of <code>path</code> with its file extension removed and\n<code>new_ext</code> appended. Like #sub_ext, but also …\n"],["set_ext!","Nuggets::File::ExtMixin","Nuggets/File/ExtMixin.html#method-i-set_ext-21","(path, new_ext, ext = extname(path))","<p>Modifies <code>path</code> in place as described for #set_ext, returning\n<code>path</code>.\n"],["sgn","Numeric","Numeric.html#method-i-sgn","()",""],["shebang_command","Util::Ruby","Util/Ruby.html#method-i-shebang_command","(filename)",""],["shuffle","Array","Array.html#method-i-shuffle","()","<p>Shuffles <em>array</em> in random order. Select a different shuffling\nalgorithm: <code>Array.send(:alias_method, :shuffle,</code> …\n"],["shuffle!","Array","Array.html#method-i-shuffle-21","()","<p>Destructive version of #shuffle.\n"],["shuffle_kfy","Array","Array.html#method-i-shuffle_kfy","()","<p>Non-destructive version of #shuffle_kfy!.\n"],["shuffle_kfy!","Array","Array.html#method-i-shuffle_kfy-21","()","<p>Shuffles <em>array</em> in random order using the Knuth-Fisher-Yates\nalgorithm.\n"],["shuffle_knuth","Array","Array.html#method-i-shuffle_knuth","()","<p>Non-destructive version of #shuffle_knuth!.\n"],["shuffle_knuth!","Array","Array.html#method-i-shuffle_knuth-21","()","<p>Shuffles <em>array</em> in random order using Knuth’s algorithm.\n"],["sign","Numeric","Numeric.html#method-i-sign","()",""],["signum","Numeric","Numeric.html#method-i-signum","()","<p>Returns the sign of <em>num</em>.\n"],["silence","Nuggets::Object::SilenceMixin","Nuggets/Object/SilenceMixin.html#method-i-silence","()","<p>Silence warnings for block execution.\n"],["singleton_class","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-singleton_class","()","<p>Returns the singleton (or virtual/eigen/meta) class associated with\n<em>object</em>.\n"],["singleton_class?","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-singleton_class-3F","()","<p>Returns <code>true</code> if <em>object</em> is a singleton_class (i.e.,\nhas a singleton_object), <code>false</code> otherwise.\n"],["singleton_instance","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-singleton_instance","()",""],["singleton_object","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-singleton_object","()","<p>Returns the object of which <em>object</em> is the singleton_class. Raises\na TypeError if <em>object</em> is not a singleton …\n"],["sort_by_dotted_decimal","Array","Array.html#method-i-sort_by_dotted_decimal","()",""],["standard_deviation","Nuggets::Array::StandardDeviationMixin","Nuggets/Array/StandardDeviationMixin.html#method-i-standard_deviation","(&block)","<p>Calculates the standard deviation of the values in <em>array</em>.\n"],["std","Nuggets::Array::StandardDeviationMixin","Nuggets/Array/StandardDeviationMixin.html#method-i-std","(&block)",""],["strictly_ascending?","Array","Array.html#method-i-strictly_ascending-3F","()","<p>Check whether <em>array</em> is strictly ascending.\n"],["strictly_decreasing?","Array","Array.html#method-i-strictly_decreasing-3F","()",""],["strictly_descending?","Array","Array.html#method-i-strictly_descending-3F","()","<p>Check whether <em>array</em> is strictly descending.\n"],["strictly_increasing?","Array","Array.html#method-i-strictly_increasing-3F","()",""],["style","Util::ANSIColor2CSS","Util/ANSIColor2CSS.html#method-i-style","(attributes)",""],["sub","Nuggets::File::SubMixin","Nuggets/File/SubMixin.html#method-i-sub","(name, *args)","<p>Calls String#sub! on file <code>name</code>‘s contents with\n<code>args</code> and (optional) <code>block</code> and returns the new\ncontent. …\n"],["sub!","Nuggets::File::SubMixin","Nuggets/File/SubMixin.html#method-i-sub-21","(name, *args)","<p>Calls String#sub! on file <code>name</code>‘s contents with\n<code>args</code> and (optional) <code>block</code> and replaces the file\nwith the …\n"],["sub_ext","Nuggets::File::ExtMixin","Nuggets/File/ExtMixin.html#method-i-sub_ext","(path, new_ext, ext = extname(path))","<p>Returns a copy of <code>path</code> with its file extension replaced with\n<code>new_ext</code> (if present; see also #set_ext). …\n"],["sub_ext!","Nuggets::File::ExtMixin","Nuggets/File/ExtMixin.html#method-i-sub_ext-21","(path, new_ext, ext = extname(path))","<p>Modifies <code>path</code> in place as described for #sub_ext, returning\n<code>path</code>, or <code>nil</code> if no modifications were made. …\n"],["sub_with_md","String","String.html#method-i-sub_with_md","(pattern, replacement = nil)","<p>Just like #sub, but passes the MatchData object instead of the current\nmatch string to the block.\n"],["sub_with_md!","String","String.html#method-i-sub_with_md-21","(pattern, replacement = nil)","<p>Destructive version of #sub_with_md.\n"],["success?","Net::HTTPClientError","Net/HTTPClientError.html#method-i-success-3F","()",""],["success?","Net::HTTPMultipleChoice","Net/HTTPMultipleChoice.html#method-i-success-3F","()",""],["success?","Net::HTTPRedirection","Net/HTTPRedirection.html#method-i-success-3F","()",""],["success?","Net::HTTPResponse","Net/HTTPResponse.html#method-i-success-3F","()",""],["success?","Net::HTTPServerError","Net/HTTPServerError.html#method-i-success-3F","()",""],["success?","Net::HTTPSuccess","Net/HTTPSuccess.html#method-i-success-3F","()",""],["to_a","Nuggets::Version","Nuggets/Version.html#method-c-to_a","()","<p>Returns array representation.\n"],["to_binary_s","Integer","Integer.html#method-i-to_binary_s","(length = nil)","<p>Returns <em>int</em> as binary number string; optionally zero-padded to\n<code>length</code>.\n"],["to_bool","Nuggets::Object::BooleanMixin","Nuggets/Object/BooleanMixin.html#method-i-to_bool","()",""],["to_dotted_decimal","Integer","Integer.html#method-i-to_dotted_decimal","()","<p>Converts <em>int</em> to dotted-decimal notation.\n"],["to_h","Array","Array.html#method-i-to_h","(value = default = true)",""],["to_hash","Array","Array.html#method-i-to_hash","(value = default = true)","<p>If neither <code>value</code> nor block is given, converts <em>array</em>,\ntaken as an array of key/value pairs, into a hash, …\n"],["to_hms","Numeric","Numeric.html#method-i-to_hms","(precision = 0, labels = %w[h m s], time = hms)","<p>Produces a stringified version of <em>num</em>’s time portions (cf.\n#hms), with the specified <code>precision</code> for the …\n"],["to_multiple_of","Numeric","Numeric.html#method-i-to_multiple_of","(target, what = :round)","<p>Returns the nearest multiple of <code>target</code> according to\n<code>what</code>.\n"],["to_s","Nuggets::Version","Nuggets/Version.html#method-c-to_s","()","<p>Short-cut for version string.\n"],["to_ymd","Numeric","Numeric.html#method-i-to_ymd","(include_hms = false, labels = %w[y m d])","<p>Produces a stringified version of <em>num</em>’s date portions (cf.\n#ymd), analogous to #to_hms. Includes time …\n"],["true?","Nuggets::Object::BooleanMixin","Nuggets/Object/BooleanMixin.html#method-i-true-3F","()",""],["underscore","Nuggets::String::CamelscoreMixin","Nuggets/String/CamelscoreMixin.html#method-i-underscore","()","<p>Returns the under_score form of <em>str</em>.\n"],["underscore!","Nuggets::String::CamelscoreMixin","Nuggets/String/CamelscoreMixin.html#method-i-underscore-21","()","<p>Replaces <em>str</em> with its under_score form and returns <em>str</em>.\n"],["uniclass","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-uniclass","()",""],["uniclass?","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-uniclass-3F","()",""],["uniobject","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-uniobject","()",""],["unroll","Nuggets::Hash::UnrollMixin","Nuggets/Hash/UnrollMixin.html#method-i-unroll","(*value_keys, &block)","<p>“Unrolls” a nested hash, so that each path through <em>hash</em>\nresults in a row that is, e.g., suitable …\n"],["upcase?","String","String.html#method-i-upcase-3F","()",""],["upper_case?","String","String.html#method-i-upper_case-3F","()","<p>Tell whether <em>str</em> is all upper case.\n"],["usage","Util::CLI","Util/CLI.html#method-i-usage","()",""],["usage","Util::CLI","Util/CLI.html#method-c-usage","(prog)",""],["user_encoding","Nuggets::Env::UserEncodingMixin","Nuggets/Env/UserEncodingMixin.html#method-i-user_encoding","(default = 'UTF-8')","<p>Finds the user’s selected encoding.\n"],["user_home","Nuggets::Env::UserHomeMixin","Nuggets/Env/UserHomeMixin.html#method-i-user_home","(default = ::File::ALT_SEPARATOR ? 'C:/' : '/')","<p>Returns the user’s home directory, or <code>default</code> if it could\nnot be found.\n"],["vain?","Nuggets::Array::BlankMixin","Nuggets/Array/BlankMixin.html#method-i-vain-3F","()","<p>Returns <code>true</code> if all of <em>array</em>’s elements are\nthemselves vain.\n"],["vain?","Nuggets::Hash::BlankMixin","Nuggets/Hash/BlankMixin.html#method-i-vain-3F","()","<p>Returns <code>true</code> if all of <em>hash</em>’s values are themselves\nvain.\n"],["vain?","Nuggets::Object::BlankMixin","Nuggets/Object/BlankMixin.html#method-i-vain-3F","()",""],["var","Nuggets::Array::VarianceMixin","Nuggets/Array/VarianceMixin.html#method-i-var","()",""],["variance","Nuggets::Array::VarianceMixin","Nuggets/Array/VarianceMixin.html#method-i-variance","()","<p>Calculates the variance of the values in <em>array</em>.\n"],["version","Util::CLI","Util/CLI.html#method-c-version","()",""],["version","Util::CLI","Util/CLI.html#method-i-version","()",""],["virtual_class","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-virtual_class","()",""],["virtual_class?","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-virtual_class-3F","()",""],["virtual_object","Nuggets::Object::SingletonClassMixin","Nuggets/Object/SingletonClassMixin.html#method-i-virtual_object","()",""],["void?","Nuggets::Object::BlankMixin","Nuggets/Object/BlankMixin.html#method-i-void-3F","()","<p>Adds white-space strings, 0 and arrays of <code>nil</code> objects to the\nlist of blank objects.\n"],["warn","Util::CLI","Util/CLI.html#method-i-warn","(msg)",""],["wc","Nuggets::String::WcMixin","Nuggets/String/WcMixin.html#method-i-wc","()","<p>Count number of lines, words, and bytes in <em>str</em>.\n"],["wc_c","Nuggets::String::WcMixin","Nuggets/String/WcMixin.html#method-i-wc_c","()",""],["wc_l","Nuggets::String::WcMixin","Nuggets/String/WcMixin.html#method-i-wc_l","()",""],["wc_m","Nuggets::String::WcMixin","Nuggets/String/WcMixin.html#method-i-wc_m","()",""],["wc_w","Nuggets::String::WcMixin","Nuggets/String/WcMixin.html#method-i-wc_w","()",""],["which","Nuggets::File::WhichMixin","Nuggets/File/WhichMixin.html#method-i-which","(executable, extensions = DEFAULT_EXTENSIONS)","<p>Returns <code>executable</code> if it’s executable, or the full path to\n<code>executable</code> found in PATH, or <code>nil</code> otherwise. …\n"],["which_command","Nuggets::File::WhichMixin","Nuggets/File/WhichMixin.html#method-i-which_command","(commands, extensions = DEFAULT_EXTENSIONS)","<p>Returns the first of <code>commands</code> that is executable (according to\n#which).\n"],["with","Nuggets::Env::SetMixin","Nuggets/Env/SetMixin.html#method-i-with","(env = {}, clear = false)","<p>Temporarily overrides ENV with <code>env</code> for the block execution.\nSee #set.\n"],["without","Nuggets::Env::SetMixin","Nuggets/Env/SetMixin.html#method-i-without","(env = {}, clear = true)",""],["word_count","Nuggets::String::WcMixin","Nuggets/String/WcMixin.html#method-i-word_count","()","<p>Count number of words in <em>str</em>.\n"],["word_wrap","String","String.html#method-i-word_wrap","(line_width = 80, as_array = false)","<p>Word wrap a string not exceeding <code>line_width</code>. Based on the Ruby\nFacets implementation, but preserves paragraphs. …\n"],["word_wrap!","String","String.html#method-i-word_wrap-21","(line_width = 80)","<p>As with #word_wrap, but modifies the string in place.\n"],["word_wrap_paragraph","String","String.html#method-i-word_wrap_paragraph","(line_width = 80)","<p>Similar to #word_wrap, but assumes a single paragraph.\n"],["word_wrap_paragraph!","String","String.html#method-i-word_wrap_paragraph-21","(line_width = 80)","<p>Destructive version of #word_wrap_paragraph.\n"],["write","IO","IO.html#method-c-write","(name, binary = false)","<p>Opens <code>name</code> with mode <code>w</code>.\n"],["write_read","IO","IO.html#method-c-write_read","(name, binary = false)","<p>Opens <code>name</code> with mode <code>w+</code>.\n"],["xor","Nuggets::String::XorMixin","Nuggets/String/XorMixin.html#method-i-xor","(other, require_same_length = false)","<p>Bitwise EXCLUSIVE OR.\n"],["ymd","Numeric","Numeric.html#method-i-ymd","()","<p>Converts <em>num</em> into year, month, and day portions.\n"],["COPYING","","COPYING.html","","<p>License for ruby-nuggets\n\n<pre>                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       ...</pre>\n"],["ChangeLog","","ChangeLog.html","","<p>Revision history for ruby-nuggets\n<p>x.y.z [yyyy-mm-dd]\n<p>…\n"],["README","","README.html","","<p>ruby-nuggets - Some extensions to the Ruby programming language\n<p>VERSION\n<p>This documentation refers to ruby-nuggets …\n"]],"searchIndex":["array","enumerable","file","hash","io","integer","net","httpclienterror","httpinformation","httpmultiplechoice","httpredirection","httpresponse","httpservererror","httpsuccess","nuggets","array","blankmixin","correlationmixin","histogrammixin","limitmixin","meanmixin","medianmixin","modemixin","regressionmixin","runiqmixin","standarddeviationmixin","variancemixin","env","setmixin","userencodingmixin","userhomemixin","file","extmixin","replacemixin","submixin","whichmixin","hash","blankmixin","deepmergemixin","nestmixin","unrollmixin","io","interactmixin","nullmixin","redirectmixin","integer","lengthmixin","mapmixin","object","blankmixin","booleanmixin","msendmixin","silencemixin","singletonclassmixin","proc","bindmixin","range","quantilemixin","string","camelscoremixin","evaluatemixin","wcmixin","xormixin","uri","contenttypemixin","existmixin","redirectmixin","version","numeric","object","contenttype","proc","process","range","string","case","tempfile","uri","util","ansicolor2css","cli","contenttype","i18n","pluggable","ruby","%()","nuggets()","^()","_block_for_all_any_extended()","_nuggets_original_all?()","_nuggets_original_any?()","_nuggets_original_max()","_nuggets_original_max_by()","_nuggets_original_min()","_nuggets_original_min_by()","_nuggets_original_minmax()","_nuggets_original_minmax_by()","_nuggets_original_open()","_nuggets_original_read()","abort()","agrep()","agrep()","all?()","annotated_histogram()","ansicolor2css()","ansicolour2css()","any?()","append()","append_read()","arithmetic_mean()","ascending?()","ask()","at()","at_least()","at_most()","average()","avg()","between()","between()","bind()","blank?()","boolean?()","byte_count()","camelcase()","camelcase!()","camelize()","camelize!()","cap()","capitalize_first()","capitalize_first!()","capitalized?()","case()","ceil_to()","char_count()","chomp_ext()","chomp_ext!()","clear()","comb()","command_for_ruby_tool()","constantize()","content_type()","convert()","corr()","correlation_coefficient()","count_by_re()","count_by_re2()","cov()","covariance()","decreasing?()","deep_merge()","deep_merge!()","deep_update()","defaults()","descending?()","digit_count()","downcase?()","eigenclass()","eigenclass?()","eigenobject()","evaluate()","execute()","execute()","exist?()","exists?()","exit()","extended()","extended()","extended()","f!()","fac()","factorial()","factorial_memoized()","false?()","first()","flatten_once()","flatten_once!()","floor_to()","follow_redirect()","format()","formatted_histogram()","from_dotted_decimal()","generalized_mean()","generic_opts()","geomean()","geometric_mean()","get_redirect()","ghost_class()","ghost_class?()","ghost_object()","gimme_match_data!()","gsub()","gsub!()","gsub_with_md()","gsub_with_md!()","harmean()","harmonic_mean()","head_redirect()","histogram()","hms()","in_order()","in_order()","in_order!()","included()","included()","included()","included()","increasing?()","init()","insert()","insert!()","interact()","interact_ruby()","last()","length()","limit()","limit()","line_count()","linear_least_squares()","llsq()","load_config()","load_env_plugins()","load_gem_plugins()","load_path_plugins()","load_plugin_file()","load_plugin_files()","load_plugins()","load_plugins_for()","loaded_plugins()","locate_ruby_tool()","locate_ruby_tool_by_basename()","lower_case?()","map_positive()","max()","max()","max_by()","mean()","median()","merge_config()","metaclass()","metaclass?()","metaobject()","min()","min()","min_by()","minkowski_mean()","minmax()","minmax_by()","mixed_case?()","mode()","modes()","monotone?()","monotonic?()","msend()","msub()","msub!()","negate()","negative?()","nest()","new()","non_negative?()","nsub()","nsub!()","of()","of()","only()","only()","only_pair()","open()","open_file_or_std()","open_with_mode()","option_parser()","opts()","parent_const_get()","parse_options()","plugin_filename()","pmcc()","pmf()","positive?()","post_opts()","power_mean()","pre_opts()","probability_mass_function()","progname()","quadratic_mean()","quantile()","quit()","rand()","rand()","read()","read_write()","redirect()","replace()","replace_diacritics()","replace_diacritics!()","reset()","rms()","root_mean_square()","round_to()","ruby()","ruby()","ruby_command()","ruby_executable()","ruby_options_to_argv()","ruby_sudo_command()","ruby_supports_fork?()","runiq()","runiq!()","rvm?()","rvm_path()","rvm_ruby_string()","set()","set_ext()","set_ext!()","sgn()","shebang_command()","shuffle()","shuffle!()","shuffle_kfy()","shuffle_kfy!()","shuffle_knuth()","shuffle_knuth!()","sign()","signum()","silence()","singleton_class()","singleton_class?()","singleton_instance()","singleton_object()","sort_by_dotted_decimal()","standard_deviation()","std()","strictly_ascending?()","strictly_decreasing?()","strictly_descending?()","strictly_increasing?()","style()","sub()","sub!()","sub_ext()","sub_ext!()","sub_with_md()","sub_with_md!()","success?()","success?()","success?()","success?()","success?()","success?()","to_a()","to_binary_s()","to_bool()","to_dotted_decimal()","to_h()","to_hash()","to_hms()","to_multiple_of()","to_s()","to_ymd()","true?()","underscore()","underscore!()","uniclass()","uniclass?()","uniobject()","unroll()","upcase?()","upper_case?()","usage()","usage()","user_encoding()","user_home()","vain?()","vain?()","vain?()","var()","variance()","version()","version()","virtual_class()","virtual_class?()","virtual_object()","void?()","warn()","wc()","wc_c()","wc_l()","wc_m()","wc_w()","which()","which_command()","with()","without()","word_count()","word_wrap()","word_wrap!()","word_wrap_paragraph()","word_wrap_paragraph!()","write()","write_read()","xor()","ymd()","copying","changelog","readme"]}}